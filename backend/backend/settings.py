"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Chemin absolu du répertoire de stockage des fichiers de médias
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_ROOT = '/var/www/media/'
# URL pour accéder aux fichiers de médias
MEDIA_URL = '/media/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$e=jbvgut^mo+cl*5_!md^-z61e)qe^jrbq)^i#sz59m#$!go)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# DOMAINE AND HOST FOR THE API
IP = config('IP')

URL_IP = f"https://{IP}:8000"

ALLOWED_HOSTS = ["localhost", IP]

SESSION_COOKIE_AGES = 60 * 60 * 24 * 7  # 1 semaine
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

MIME_TYPES = {
    'text/html': 'text/html',
    'text/css': 'text/css',
    'text/javascript': 'text/javascript',
    'application/json': 'application/json',
    'image/png': 'image/png',
    'image/jpeg': 'image/jpeg',
    'image/gif': 'image/gif',
    'image/svg+xml': 'image/svg+xml',
    'application/pdf': 'application/pdf',
    'application/javascript': 'application/javascript',
    'image/x-icon': 'image/x-icon',
    # Ajoutez d'autres types MIME personnalisés ici si nécessaire
}

SESSION_COOKIE_HTTPONLY = False

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'auth_service',
    'com_service',
    'game_service',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_otp.middleware.OTPMiddleware',
]

# ASGI application for websocket and asyncronous tasks

ASGI_APPLICATION = 'backend.asgi.application'

CHANNEL_LAYERS = {
	'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config('POSTGRES_DB'),
        "USER": config('POSTGRES_USER'),
        "PASSWORD": config('POSTGRES_PASSWORD'),
        "HOST": "db",
        "PORT": 5432, 
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'backend/static'),
# ]

STATIC_URL = '/static/'

STATIC_ROOT = '/var/www/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# PROTECTION CSRF FOR THE AUTHENTICATION
CSRF_TRUSTED_ORIGINS = [
    "https://localhost:8000",
	URL_IP
]

# PROTECTION XSS WITH CORS
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "https://localhost:8000",
	URL_IP
]

CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']
CORS_ALLOW_HEADERS = [
    'content-type',
    'origin',
    'x-csrftoken',
    'x-requested-with',
    'accept',
    'authorization',
    'x-csrftoken'
]

# Redirection vers HTTPS
SECURE_SSL_REDIRECT = True  # Redirige toutes les connexions HTTP vers HTTPS

# Cookies sécurisés
CSRF_COOKIE_SECURE = True  # Cookie CSRF sécurisé, envoyé uniquement via HTTPS
SESSION_COOKIE_SECURE = True  # Cookie de session sécurisé, envoyé uniquement via HTTPS

# HSTS (HTTP Strict Transport Security)
SECURE_HSTS_SECONDS = 31536000  # Durée de la politique HSTS en secondes (1 an)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Inclut les sous-domaines dans la politique HSTS
SECURE_HSTS_PRELOAD = True  # Précharge la politique HSTS dans les navigateurs

# Autres configurations de sécurité
SECURE_BROWSER_XSS_FILTER = True  # Active le filtre XSS du navigateur
SECURE_CONTENT_TYPE_NOSNIFF = True  # Empêche les navigateurs de deviner le type de contenu

# Configuration du proxy SSL
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Utilise l'en-tête X-Forwarded-Proto pour déterminer si la connexion est sécurisée
USE_X_FORWARDED_HOST = True  # Utilise l'en-tête X-Forwarded-Host transmis par le proxy

